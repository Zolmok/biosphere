#! /usr/bin/env bash

# arch, pop, ubuntu, etc...
RELEASE=$(awk -F= '$1=="ID" { print $2 ;}' /etc/os-release)

case $(uname) in
    Darwin)
        if [ -z "$(which brew)" ]; then
            xcode-select --install # build-essential for OS X
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        fi
        ;;
    Linux)
        # timezone
        TIME_ZONE=$(timedatectl | grep "Time zone" | awk '{print $3}')
        if [ "${TIME_ZONE}" != "America/New_York" ]; then
            echo "Setting timezone"
            sudo timedatectl set-timezone America/New_York
        fi

        # locale
        LOCALE=$(locale | awk '$1 ~ /UTF-8/')
        if [ -z "${LOCALE}" ]; then
            sudo update-locale LANG=LANG=en_US.UTF-8 LANGUAGE=en_US:en
        fi

        if [ "${RELEASE}" == pop ] || [ "${RELEASE}" == ubuntu  ]; then
            sudo apt-get update
            sudo apt-get upgrade -y --allow-downgrades --with-new-pkgs
            sudo apt-get install -y build-essential
            # docker dependencies
            for app in apt-transport-https ca-certificates curl gnupg lsb-release; do
                if [ -z "$(which "${app}")" ]; then
                    sudo apt-get install -y ${app}
                fi
            done
            
            [ ! -f /usr/share/keyrings/docker-archive-keyring.gpg ] && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
                $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            for app in docker-ce docker-ce-cli containerd.io; do
                if [ -z "$(which "${app}")" ]; then
                    sudo apt-get install -y ${app}
                fi
            done
        fi
        if [ "${RELEASE}" == arch ]; then
            sudo pacman --noconfirm -S archlinux-keyring
            sudo pacman --noconfirm -Syu
            # base-devel == build-essential for arch
            sudo pacman --noconfirm -S base-devel which
            # install an AUR helper
            if [ -z "$(which yay)" ]; then
                git clone https://aur.archlinux.org/yay.git
                (cd yay && makepkg -si --noconfirm)
            fi
            if [ -z "$(which docker)" ]; then
                sudo pacman --noconfirm -S docker
            fi
        fi
        ;;
esac

# package manager apps
case $(uname) in
    Darwin)
        for app in awscli fzf ispell git gimp krita libffi-dev libssl-dev neovim python3 python3-pip shellcheck tmux weechat xcolor ; do
            if [ -z "$(which "${app}")" ]; then
                brew install "${app}"
            fi
        done
        for app in emacs flameshot font-fira-code gimp krita peek; do
            if [ -z "$(which "${app}")" ]; then
                brew install --cask "${app}"
            fi
        done
        ;;
    Linux)
        for app in clamav \
                       dunst \
                       emacs \
                       git \
                       firefox \
                       flameshot \
                       fonts-firacode \
                       i3 \
                       rofi \
                       ispell \
                       kitty \
                       peek \
                       git \
                       gimp \
                       krita \
                       libffi-dev \
                       libnotify-bin \
                       libssl-dev \
                       libx11-dev \
                       libx11-xcb-dev \
                       libxcursor-dev \
                       libxss-dev \
                       magnus \
                       neovim \
                       nmap \
                       obs-studio \
                       openssh-client \
                       pkg-config \
                       python3 \
                       python3-pip \
                       pulseaudio \
                       rsync \
                       shellcheck \
                       systemtap-sdt-dev \
                       tmux \
                       vlc \
                       weechat \
                       wget \
                       youtube-dl \
                       xsel \
                       zsh; do
            if [ "${RELEASE}" == pop ] || [ "${RELEASE}" == ubuntu  ]; then
                if [ -z "$(which "${app}")" ]; then
                    sudo apt-get install -y "${app}"
                fi
            fi
            if [ "${RELEASE}" == arch ]; then
                if [ "${app}" == clamav ]; then
                    if [ -z "$(which freshclam)" ]; then
                        sudo pacman --noconfirm -S freshclam
                    fi
                elif [ "${app}" == fonts-firacode ]; then
                    sudo pacman --noconfirm -S ttf-fira-code
                elif [ "${app}" == libffi-dev ]; then
                    sudo pacman --noconfirm -S libffi
                elif [ "${app}" == libssl-dev ]; then
                    sudo pacman --noconfirm -S openssl
                elif [ "${app}" == libxss-dev ]; then
                    sudo pacman --noconfirm -S libxss
                elif [ "${app}" == libx11-dev ]; then
                    sudo pacman --noconfirm -S libx11
                elif [ "${app}" == magnus ]; then
                    if [ -z "$(which ${app})" ]; then
                        sudo yay --noconfirm -S "${app}"
                    fi
                elif [ "${app}" == neovim ]; then
                    if [ -z "$(which nvim)" ]; then
                        sudo pacman --noconfirm -S nvim
                    fi
                elif [ "${app}" == obs-studio ]; then
                    if [ -z "$(which obs)" ]; then
                        sudo pacman --noconfirm -S "${app}"
                    fi
                elif [ "${app}" == openshot-qt ]; then
                    if [ -z "$(which ${app})" ]; then
                        sudo pacman --noconfirm -S openshot
                    fi
                elif [ "${app}" == openssh-client ]; then
                    if [ -z "$(which ssh)" ]; then
                        sudo pacman --noconfirm -S openssh
                    fi
                elif [ "${app}" == python3-pip ]; then
                    if [ -z "$(which pip3)" ]; then
                        sudo pacman --noconfirm -S python-pip
                    fi
                elif [ -z "$(which "${app}")" ]; then
                    sudo pacman --noconfirm -S "${app}"
                else
                    echo "${app}" already installed
                fi
            fi
        done
        ;;
esac

# rust
if [ -z "$(which rustup)" ]; then
    echo "Installing rust"
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    source "$HOME/.cargo/env"
fi
# rust apps
for app in bat cargo-watch dtool exa gitui pastel ripgrep starship t-rec watchexec-cli xcolor; do
    if [ "${app}" == ripgrep ]; then
        if [ -z "$(which rg)" ]; then
            cargo install "${app}"
        fi
    elif [ "${app}" == watchexec-cli ]; then
        if [ -z "$(which watchexec)" ]; then
            cargo install "${app}"
        fi
    elif [ -z "$(which "${app}")" ]; then
        cargo install "${app}"
    else
        echo "${app} already installed"
    fi
done

# dotfiles
if [ ! -d ~/.dotfiles ]; then
    echo "Installing dotfiles"
    mv ~/.zshenv ~/.zshenv-orig
    mv ~/.zshrc ~/.zshrc-orig
    git clone --bare git@github.com:socketwiz/dotfiles.git "$HOME/.dotfiles"
    git --git-dir="$HOME/.dotfiles/" --work-tree="$HOME" checkout
fi

# custom scripts
if [ ! -d ~/bin ]; then
    echo "Installing custom scripts"
    git clone git@github.com:socketwiz/bin.git "$HOME/bin"
fi

# my notes
if [ ! -d ~/org ]; then
    echo "Installing org files"
    git clone git@github.com:socketwiz/org.git "$HOME/org"
fi

# fix neovim
if [ ! -f  "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim ]; then
    echo "Installing plugged"
    sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    nvim -c PlugInstall -c qall
fi

# fzf
if [ ! -d ~/.fzf ]; then
    echo "Installing fzf"
    git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
    ~/.fzf/install
fi

# 1password
if [ -z "$(which 1password)" ]; then
    if [ "${RELEASE}" == pop ] || [ "${RELEASE}" == ubuntu  ]; then
        echo "Installing 1password"
        [ ! -f /usr/share/keyrings/1password-archive-keyring.gpg ] && curl -sS https://downloads.1password.com/linux/keys/1password.asc | sudo gpg --dearmor --output /usr/share/keyrings/1password-archive-keyring.gpg
        echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/1password-archive-keyring.gpg] https://downloads.1password.com/linux/debian/amd64 stable main' | sudo tee /etc/apt/sources.list.d/1password.list
        sudo mkdir -p /etc/debsig/policies/AC2D62742012EA22/
        curl -sS https://downloads.1password.com/linux/debian/debsig/1password.pol | sudo tee /etc/debsig/policies/AC2D62742012EA22/1password.pol
        sudo mkdir -p /usr/share/debsig/keyrings/AC2D62742012EA22
        [ ! -f /usr/share/debsig/keyrings/AC2D62742012EA22/debsig.gpg ] && curl -sS https://downloads.1password.com/linux/keys/1password.asc | sudo gpg --dearmor --output /usr/share/debsig/keyrings/AC2D62742012EA22/debsig.gpg
        sudo apt-get update && sudo apt-get install -y 1password
    fi
    if [ "${RELEASE}" == arch ]; then
        curl -sS https://downloads.1password.com/linux/keys/1password.asc | gpg --import
        git clone https://aur.archlinux.org/1password.git
        (cd 1password && makepkg -si --noconfirm)
    fi
fi

# slack
if [ -z "$(which slack)" ]; then
    if [ "${RELEASE}" == pop ] || [ "${RELEASE}" == ubuntu  ]; then
        curl https://downloads.slack-edge.com/releases/linux/4.20.0/prod/x64/slack-desktop-4.20.0-amd64.deb --output slack-desktop-4.20.0-amd64.deb
        sudo apt-get install -y ./slack-desktop-4.20.0-amd64.deb
        rm ./slack-desktop-4.20.0-amd64.deb
    fi
    if [ "${RELEASE}" == arch ]; then
        yay --noconfirm -S slack-desktop
    fi
fi

# chrome
if [ -z "$(which google-chrome-stable)" ]; then
    if [ "${RELEASE}" == pop ] || [ "${RELEASE}" == ubuntu  ]; then
        wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
        sudo apt-get install -y ./google-chrome-stable_current_amd64.deb
        rm "./google-chrome-stable_current_amd64.deb"
    fi
    if [ "${RELEASE}" == arch ]; then
        yay --noconfirm -S google-chrome
    fi
fi

# user modifications
# add sudo permissions
if [ "${RELEASE}" == pop ] || [ "${RELEASE}" == ubuntu  ]; then
    sudo usermod -aG sudo "${USER}"
fi
if [ "${RELEASE}" == arch ]; then
    sudo usermod -aG wheel "${USER}"
fi
# change default shell to zsh
if [ "$(echo "$0")" != "-zsh" ]; then
    sudo chsh -s /usr/bin/zsh "${USER}"
fi

# setup npm packages locally
export NPM_PACKAGES="$HOME/.npm-packages"
echo "prefix = $NPM_PACKAGES" >> ~/.npmrc
